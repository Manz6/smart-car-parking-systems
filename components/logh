import React, { useEffect, useState } from 'react'
import { View, Text, StyleSheet, FlatList } from 'react-native'
import { createClient } from '@supabase/supabase-js'
import { RouteProp, useRoute } from '@react-navigation/native'

const supabaseUrl = 'https://velagnrotxuqhiczsczz.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZlbGFnbnJvdHh1cWhpY3pzY3p6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2MjkxMjcsImV4cCI6MjA1NTIwNTEyN30.Xpr6wjdZdL6KN4gcZZ_q0aHOLpN3aAcG89uso0a_Fsw'
const supabase = createClient(supabaseUrl, supabaseKey)

type LoginHistoryRouteProp = RouteProp<
  { LoginHistory: { session: any } },
  'LoginHistory'
>

type LoginEntry = {
  id: string
  login_time: string
  latitude: number | null
  longitude: number | null
  session_id: string | null
}

export default function LoginHistory() {
  const route = useRoute<LoginHistoryRouteProp>()
  const session = route.params?.session

  const [loginHistory, setLoginHistory] = useState<LoginEntry[]>([])

  useEffect(() => {
    if (session?.user?.id) {
      fetchLoginHistory(session.user.id)
    }
  }, [session])

  const fetchLoginHistory = async (userId: string) => {
    console.log('Fetching login history for userId:', userId);
    try {
      const { data, error } = await supabase
        .from('login_details')
        .select('id, login_time, latitude, longitude, session_id')
        .eq('user_id', userId)
        .order('login_time', { ascending: false }) // Most recent first
      if (error) throw error
      console.log('Fetched data:', data);
      setLoginHistory(data || [])
    } catch (err) {
      console.error('Login history fetch error:', err)
    }
  }

  const renderLoginItem = ({ item }: { item: LoginEntry }) => (
    <View style={styles.loginItem}>
      <Text style={styles.loginText}>
        <Text style={styles.bold}>Date & Time:</Text>{' '}
        {new Date(item.login_time).toLocaleString()}
      </Text>
      <Text style={styles.loginText}>
        <Text style={styles.bold}>Location:</Text>{' '}
        {item.latitude && item.longitude
          ? `${item.latitude.toFixed(4)}, ${item.longitude.toFixed(4)}`
          : 'Not available'}
      </Text>
    </View>
  )

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Login History</Text>
      {loginHistory.length === 0 ? (
        <Text style={styles.noDataText}>No login history available.</Text>
      ) : (
        <FlatList
          data={loginHistory}
          keyExtractor={(item) => item.id}
          renderItem={renderLoginItem}
          contentContainerStyle={styles.listContainer}
        />
      )}
    </View>
  )
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#f9f9f9' },
  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },
  listContainer: { paddingBottom: 20 },
  loginItem: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    elevation: 2,
  },
  loginText: { fontSize: 16, color: '#333', marginBottom: 5 },
  bold: { fontWeight: 'bold' },
  noDataText: { fontSize: 16, color: '#666', textAlign: 'center', marginTop: 20 },
})
