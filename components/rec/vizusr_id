import React, { useEffect, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, FlatList, Alert, ScrollView } from 'react-native';
import { createClient } from '@supabase/supabase-js';
import { useNavigation } from '@react-navigation/native';

const supabaseUrl = 'https://velagnrotxuqhiczsczz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZlbGFnbnJvdHh1cWhpY3pzY3p6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2MjkxMjcsImV4cCI6MjA1NTIwNTEyN30.Xpr6wjdZdL6KN4gcZZ_q0aHOLpN3aAcG89uso0a_Fsw';
const supabase = createClient(supabaseUrl, supabaseKey);

const SLOT_STATUS = {
  EMPTY: 'empty',
  RESERVED: 'reserved',
  OCCUPIED: 'occupied',
};

const PRICE_PER_SLOT = 200; // Price in rupees
const decks = ['Upper Deck', 'Lower Deck'];

const SmartParkingSystem = ({ route }) => {
  const { session } = route.params;
  const [slots, setSlots] = useState([]);
  const [selectedSlots, setSelectedSlots] = useState([]);
  const [userId, setUserId] = useState(null); // State to store the user's UUID
  const navigation = useNavigation();

  useEffect(() => {
    // Fetch slots and user session on component mount
    fetchSlots();
    if (session) {
      console.log('User ID in Visualization.tsx:', session.user.id); // Should now work
    } else {
      console.log('No session in Visualization.tsx');
    }
  }, [session]);

  // Fetch the current user's session to get the UUID
  const fetchUserSession = async () => {
    try {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) throw error;
      if (session && session.user) {
        setUserId(session.user.id); // Set the user ID from the session
        console.log('User ID:', session.user.id);
      } else {
        console.log('No active session found.');
      }
    } catch (err) {
      console.error('Fetch Session Error:', err.message);
      Alert.alert('Error', 'Failed to fetch user session.');
    }
  };

  // Fetch slots from Supabase
  const fetchSlots = async () => {
    try {
      const { data, error } = await supabase
        .from('parking_slots')
        .select('*, profiles(username)')
        .order('id');

      if (error) throw error;

      console.log('Raw Fetched Data:', data);

      const validData = (data || []).filter(
        (slot) => slot.id && slot.deck && slot.status
      );

      console.log('Fetched and Validated Slots:', validData);
      setSlots(validData);
    } catch (err) {
      console.error('Fetch Slots Error:', err);
      Alert.alert('Error', 'Failed to fetch parking slots.');
    }
  };

  // Update slot status and UUID
  const updateSlot = async (slotId, newStatus) => {
    try {
      console.log('Updating Slot ID:', slotId, 'to Status:', newStatus);

      const updateData = {
        status: newStatus,
      };

      // If reserving a slot, include the current user's UUID
      if (newStatus === SLOT_STATUS.RESERVED && userId) {
        updateData.uuid = userId;
      } else if (newStatus === SLOT_STATUS.EMPTY) {
        updateData.uuid = null; // Clear UUID if slot is set back to empty
      }

      const { data, error } = await supabase
        .from('parking_slots')
        .update(updateData)
        .eq('id', parseInt(slotId, 10))
        .select('*');

      if (error) throw error;

      if (!data || data.length === 0) {
        throw new Error('No matching slot found to update.');
      }

      setSlots((prevSlots) =>
        prevSlots.map((slot) =>
          slot.id === slotId ? { ...slot, ...updateData } : slot
        )
      );

      if (newStatus === SLOT_STATUS.RESERVED) {
        setSelectedSlots((prev) => [...prev, slotId]);
      } else {
        setSelectedSlots((prev) => prev.filter((id) => id !== slotId));
      }

      fetchSlots(); // Refresh slots after update
    } catch (err) {
      console.error('Update Slot Error:', err);
      Alert.alert('Error', err.message || 'Failed to update the slot status.');
    }
  };

  // Handle slot press
  const handleSlotPress = (slot) => {
    if (!userId) {
      Alert.alert('Error', 'You must be logged in to reserve a slot.');
      return;
    }

    if (slot.status === SLOT_STATUS.EMPTY) {
      updateSlot(slot.id, SLOT_STATUS.RESERVED);
    } else if (slot.status === SLOT_STATUS.RESERVED) {
      if (selectedSlots.includes(slot.id)) {
        updateSlot(slot.id, SLOT_STATUS.EMPTY);
      } else {
        Alert.alert('Slot Reserved', 'This slot is already reserved by someone else.');
      }
    } else if (slot.status === SLOT_STATUS.OCCUPIED) {
      Alert.alert('Slot Occupied', 'This slot is currently occupied.');
    }
  };

  // Navigate to payment page
  const goToPayment = () => {
    if (selectedSlots.length === 0) {
      Alert.alert('No Slots Selected', 'Please select at least one parking slot.');
      return;
    }

    const totalAmount = selectedSlots.length * PRICE_PER_SLOT;

    navigation.navigate('Payment', {
      slots: selectedSlots,
      amount: totalAmount,
      pricePerSlot: PRICE_PER_SLOT,
    });
  };

  // Render each slot
  const renderSlot = ({ item }) => (
    <TouchableOpacity
      style={[
        styles.slot,
        getSlotStyle(item.status),
        selectedSlots.includes(item.id) && styles.selectedSlot,
      ]}
      onPress={() => handleSlotPress(item)}
    >
      <Text style={styles.slotText}>{item.id}</Text>
      {(() => {
        if (item.profiles) {
          return (
            <Text style={styles.slotInfo}>
              Booked by: {item.profiles.username}
            </Text>
          );
        } else if (!item.profiles && item.status === SLOT_STATUS.OCCUPIED) {
          return (
            <Text style={styles.slotInfo}>Booked</Text>
          );
        } else {
          return (
            <Text style={styles.slotInfo}>Available</Text>
          );
        }
      })()}
    </TouchableOpacity>
  );

  // Determine slot style based on status
  const getSlotStyle = (status) => {
    switch (status) {
      case SLOT_STATUS.EMPTY:
        return styles.emptySlot;
      case SLOT_STATUS.RESERVED:
        return styles.reservedSlot;
      case SLOT_STATUS.OCCUPIED:
        return styles.occupiedSlot;
      default:
        return styles.emptySlot;
    }
  };

  // Main render
  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {/* Pricing information */}
        <View style={styles.infoCard}>
          <Text style={styles.infoText}>Price per slot: ₹{PRICE_PER_SLOT}</Text>
          <Text style={styles.infoText}>
            Selected slots: {selectedSlots.length}
            {selectedSlots.length > 0 ? ` (₹${selectedSlots.length * PRICE_PER_SLOT})` : ''}
          </Text>
        </View>

        {/* Slot display */}
        {decks.map((deck) => {
          const filteredSlots = slots.filter(
            (slot) => slot.deck.trim().toLowerCase() === deck.trim().toLowerCase()
          );

          return (
            <View key={deck} style={styles.deck}>
              <Text style={styles.deckTitle}>{deck}</Text>
              {filteredSlots.length > 0 ? (
                <FlatList
                  data={filteredSlots}
                  renderItem={renderSlot}
                  keyExtractor={(item) => item.id.toString()}
                  numColumns={3}
                />
              ) : (
                <Text>No slots available for this deck.</Text>
              )}
            </View>
          );
        })}
      </ScrollView>

      {/* Payment button - positioned absolutely */}
      {selectedSlots.length > 0 && (
        <View style={styles.paymentButtonContainer}>
          <TouchableOpacity style={styles.paymentButton} onPress={goToPayment}>
            <Text style={styles.paymentButtonText}>
              Proceed to Payment (₹{selectedSlots.length * PRICE_PER_SLOT})
            </Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
};

// Styles (unchanged)
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContent: {
    padding: 10,
    paddingBottom: 80,
  },
  infoCard: {
    backgroundColor: '#fff',
    borderRadius: 5,
    padding: 15,
    marginBottom: 15,
    elevation: 2,
  },
  infoText: {
    fontSize: 16,
    marginBottom: 5,
  },
  deck: {
    marginVertical: 10,
  },
  deckTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  slot: {
    width: 100,
    height: 80,
    margin: 5,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 5,
    borderWidth: 1,
    padding: 5,
  },
  slotText: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  slotInfo: {
    fontSize: 12,
    textAlign: 'center',
  },
  emptySlot: {
    backgroundColor: '#e0e0e0',
  },
  reservedSlot: {
    backgroundColor: '#f9a825',
  },
  occupiedSlot: {
    backgroundColor: '#e53935',
  },
  selectedSlot: {
    borderColor: '#4CAF50',
    borderWidth: 3,
  },
  paymentButtonContainer: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    right: 20,
  },
  paymentButton: {
    backgroundColor: '#4CAF50',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  paymentButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default SmartParkingSystem;
